accessible: true
author: Mathieu Xhonneux & Maxime Mawait & Cyril Pletinckx
context: |-
    For your (possibly) future network's course, you will have to detect and analyse the data that are exchanged between two computers through the network (for example using the WiFi). In this exercise, we give you a function ``modem_read``, to read the data exchanged thanks to the network, with the following prototype :

    ``void modem_read(void *buffer, int *buf_len);``

    This function fills the supplied buffer with the data captured (an array of ``char``), and writes the number of bytes written to this buffer in the variable pointed by ``buf_len``. It can catch up to maximum 256 bytes in a single call. This function is guaranteed to return.
environment: cpp
evaluate: best
groups: false
input_random: '0'
limits:
    time: '30'
    memory: '100'
    output: '2'
name: '[S3] Reading from the wire '
network_grading: false
order: 23
problems:
    modem:
        header: |-
            You want to analyse your network to see if a certain virus infected it or not. This virus consists of changing some bytes to an other byte whose numerical value is ``42``. Hence, you will use the function ``modem_read`` to catch some data passing through your network and process it to detect the "42 byte". Write the body of the function ``has_42``, this function has to use ``malloc`` to create the buffer before calling ``modem_read``.

            **NB** : you know that in your network the byte whose numerical value is 42 is forbidden in normal circumstances so if you detect such a byte, it is inevitably because your network is infected.

            .. code-block:: c

                /*
                 * @return: 1 if your network is infected
                 *         else 0, -1 if an error has happened.
                 */
                int has_42() {
        type: code
        name: '42'
        default: ''
        language: c
stored_submissions: 0
submission_limit:
    amount: 12
    period: 1
tags:
    '0':
        name: Q1
        type: 0
        id: q1
        description: q1 is correct
        visible: false
    '1':
        type: 1
        visible: true
        id: timeout
        description: Your code exceeded the maximum allowed time.
        name: Timeout
    '2':
        type: 1
        description: Your code produced a segmentation fault.
        visible: true
        name: Segmentation Fault
        id: sigsegv
    '3':
        visible: true
        id: not_compile
        type: 1
        name: Not compile
        description: Your code does not compile.
    '4':
        id: memory
        type: 1
        name: Memory Exceeded
        description: Your code exceeded the memory.
        visible: true
    '5':
        type: 1
        description: Your code produced a floating point exception.
        name: Floating Point Exception
        visible: true
        id: sigfpe
    '6':
        id: double_free
        name: Double free
        description: Your code produced a double free.
        type: 1
        visible: true
    '7':
        description: Your code used some banned functions.
        visible: true
        id: banned_funcs
        type: 1
        name: Banned functions
    '8':
        visible: true
        name: Cppcheck fails
        id: cppcheck
        type: 1
        description: Your code does not compile with cppcheck.
    '10':
        name: S3
        type: 2
        description: ''
        visible: true
        id: ''
    '11':
        description: Task about malloc
        type: 2
        name: Malloc
        visible: true
        id: ''
    '9':
        description: Level 2
        type: 2
        visible: true
        name: Level 2
        id: ''
weight: 1.0
