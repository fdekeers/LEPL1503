accessible: false
author: Louis Navarre & Alexandre Gobeaux
context: |-
    Given the following structure *university_t*:

    .. code-block:: c

        typedef struct university {
            char* city;
            int creation;
            person_t* rector;
        } university_t;

    And the structure *person_t*:

    .. code-block:: c

        typedef struct person {
            char* name;
            int salary;
            int age;
        } person_t;

    You are asked to implement the functions ``init_all`` and ``free_all``, which respectively initialises the structure *university_t* and frees all the memory associated with it.

    The *name* and the *city* have been allocated with *malloc*.

    *Hint:* all the data may not have been initialised correctly. Therefore, you have to handle all the cases (e.g. some pointers can be already NULL, and don't need to be freed).
environment: cpp
evaluate: best
groups: false
input_random: '0'
limits:
    memory: '100'
    output: '2'
    time: '30'
name: '[S3] Manipulate the memory'
network_grading: false
order: 28
problems:
    init_all:
        header: |-
            Write the body of the function ``init_all``. You must copy the strings.

            *Hint :* Use strcpy.

            .. code-block:: c

                /*
                 * @city != NULL
                 * @rectname != NULL
                 * @return: a pointer to the university structure containing the elements
                 */
                 university_t* init_all(char* city, int creation, char* rectname, int age, int salary){
        name: Init all
        language: c
        type: code
        default: ''
    free_all:
        header: |-
            Write the body of the function ``free_all``.

            .. code-block:: c

                /*
                 * Frees all the memory associated with u
                 * @pre: u != NULL
                 */
                 void free_all(university_t* u){
        default: ''
        type: code
        language: c
        name: Free all
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags:
    '0':
        type: 0
        name: Q1
        description: q1 is correct
        id: q1
        visible: false
    '1':
        type: 0
        description: q2 is correct
        id: q2
        name: Q2
        visible: false
    '2':
        visible: true
        type: 1
        id: timeout
        name: Timeout
        description: Your code exceeded the maximum allowed time.
    '3':
        description: Your code produced a segmentation fault.
        visible: true
        type: 1
        id: sigsegv
        name: Segmentation Fault
    '4':
        type: 1
        visible: true
        id: not_compile
        description: Your code does not compile.
        name: Not compile
    '5':
        name: Memory Exceeded
        id: memory
        type: 1
        description: Your code exceeded the memory.
        visible: true
    '6':
        name: Floating Point Exception
        id: sigfpe
        description: Your code produced a floating point exception.
        visible: true
        type: 1
    '7':
        description: Your code produced a double free.
        id: double_free
        type: 1
        name: Double free
        visible: true
    '8':
        type: 1
        visible: true
        id: banned_funcs
        description: Your code used some banned functions.
        name: Banned functions
    '9':
        visible: true
        id: cppcheck
        description: Your code does not compile with cppcheck.
        type: 1
        name: Cppcheck fails
    '10':
        description: ''
        name: S3
        type: 2
        visible: true
        id: ''
    '11':
        visible: true
        name: Pointer
        description: Task about pointers and their use
        type: 2
        id: ''
    '12':
        type: 2
        description: Task about free
        visible: true
        name: Free
        id: ''
    '13':
        type: 2
        description: Level 4
        visible: true
        name: Level 4
        id: ''
weight: 1.0
