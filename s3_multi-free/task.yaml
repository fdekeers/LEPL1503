accessible: false
author: Louis Navarre & Alexandre Gobeaux
context: |-
    Given the following structure *university_t*:

    .. code-block:: c

        typedef struct university {
            char* city;
            int creation;
            person_t* rector;
        } university_t;

    And the structure *person_t*:

    .. code-block:: c

        typedef struct person {
            char* name;
            int salary;
            int age;
        } person_t;

    You are asked to implement the functions ``init_all`` and ``free_all``, which respectively initialises the structure *university_t* and frees all the memory associated with it.

    The *name* and the *city* have been allocated with *malloc*.

    *Hint:* all the data may not have been initialised correctly. Therefore, you have to handle all the cases (e.g. some pointers can be already NULL, and don't need to be freed).
environment: cpp
evaluate: best
groups: false
input_random: '0'
limits:
    time: '30'
    memory: '100'
    output: '2'
name: '[S3] Manipulate the memory'
network_grading: false
order: 28
problems:
    init_all:
        name: Init all
        language: c
        header: |-
            Write the body of the function ``init_all``. You must copy the strings.

            *Hint :* Use strcpy.

            .. code-block:: c

                /*
                 * @city != NULL
                 * @rectname != NULL
                 * @return: a pointer to the university structure containing the elements
                 */
                 university_t* init_all(char* city, int creation, char* rectname, int age, int salary){
        default: ''
        type: code
    free_all:
        type: code
        language: c
        name: Free all
        header: |-
            Write the body of the function ``free_all``.

            .. code-block:: c

                /*
                 * Frees all the memory associated with u
                 * @pre: u != NULL
                 */
                 void free_all(university_t* u){
        default: ''
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags:
    '0':
        name: Q1
        type: 0
        id: q1
        description: q1 is correct
        visible: false
    '1':
        type: 0
        id: q2
        description: q2 is correct
        name: Q2
        visible: false
    '2':
        type: 1
        description: Your code exceeded the maximum allowed time.
        visible: true
        name: Timeout
        id: timeout
    '3':
        visible: true
        id: sigsegv
        type: 1
        name: Segmentation Fault
        description: Your code produced a segmentation fault.
    '4':
        id: not_compile
        type: 1
        name: Not compile
        description: Your code does not compile.
        visible: true
    '5':
        type: 1
        description: Your code exceeded the memory.
        name: Memory Exceeded
        visible: true
        id: memory
    '6':
        id: sigfpe
        name: Floating Point Exception
        description: Your code produced a floating point exception.
        type: 1
        visible: true
    '7':
        description: Your code produced a double free.
        visible: true
        id: double_free
        type: 1
        name: Double free
    '8':
        visible: true
        name: Banned functions
        id: banned_funcs
        type: 1
        description: Your code used some banned functions.
    '9':
        description: Your code does not compile with cppcheck.
        id: cppcheck
        type: 1
        visible: true
        name: Cppcheck fails
    '10':
        name: S3
        type: 2
        description: ''
        visible: true
        id: ''
    '11':
        description: Task about pointers and their use
        type: 2
        name: Pointer
        visible: true
        id: ''
    '12':
        name: Free
        description: Task about free
        type: 2
        visible: true
        id: ''
    '13':
        type: 2
        visible: true
        description: Level 4
        name: Level 4
        id: ''
weight: 1.0
