accessible: true
author: Alexandre Gobeaux
context: |-
    Here you will be playing with structures and pointers to structures so that you can understand better how to use one instead of another. You'll have to return the attributes of both and you'll have to compare them.

    .. code-block:: c

        typedef struct product {
            char *name;
            double price;
        } product_t;

    *Hints :*

    - ``char *name`` is a pointer, memory must be allocated by using `malloc(3) <https://sites.uclouvain.be/SystInfo/manpages/man3/malloc.3.html>`_ to copy the string and return it.

    - Other useful commands: `strcpy(3) <https://sites.uclouvain.be/SystInfo/manpages/man3/strcpy.3.html>`_, `strlen(3) <https://sites.uclouvain.be/SystInfo/manpages/man3/strlen.3.html>`_ and `strcmp(3) <https://sites.uclouvain.be/SystInfo/manpages/man3/strcmp.3.html>`_.
environment: cpp
evaluate: last
groups: false
input_random: '0'
limits:
    time: '30'
    memory: '100'
    output: '2'
name: '[S3] Structures and pointers to structures'
network_grading: false
order: 29
problems:
    getPtrPrice:
        name: Get Price (pointer to the structure)
        type: code
        language: c
        header: |-
            Write the body of the ``getPtrPrice`` function.

            .. code-block:: c

                /*
                 * @ptrProd != NULL
                 * @return: the price of the product ptrProd
                 */
                double getPtrPrice(product_t *ptrProd);
        default: ''
    getPrice:
        type: code
        language: c
        header: |-
            Write the body of the ``getPrice`` function.

            .. code-block:: c

                /*
                 * @return: the price of the product prod
                 */
                double getPrice(product_t prod);
        name: Get Price
        default: ''
    getPtrName:
        name: Get Name (pointer to the structure)
        language: c
        type: code
        header: |-
            Write the body of the ``getPtrName`` function.

            .. code-block:: c

                /*
                 * ptrProd != NULL
                 * @name in ptrProd != NULL
                 * @return: a string on the heap that contains the name of the product ptrProd or NULL if an error happens
                 */
                char* getPtrName(product_t *ptrProd);
        default: ''
    getName:
        language: c
        type: code
        name: Get Name
        default: ''
        header: |-
            Write the body of the ``getName`` function.

            .. code-block:: c

                /*
                 * @name in prod != NULL
                 * @return: a string on the heap that contains the name of the product ptrProd or NULL if an error happens
                 */
                char* getName(product_t prod);
    prodEquals:
        type: code
        default: ''
        name: Product Equals
        language: c
        header: |-
            Write the body of the ``prodEquals`` function.

            .. code-block:: c

                /*
                 * @ptrProd != NULL
                 * @name in ptrProd != NULL
                 * @name in prod != NULL
                 * @return: 1 if the two products are the same, i.e., they have the same price and the same name
                 */
                int prodEquals(product_t *ptrProd, product_t prod);
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags:
    '0':
        name: Q1
        type: 0
        id: q1
        description: q1 is correct
        visible: false
    '1':
        type: 0
        id: q2
        description: q2 is correct
        name: Q2
        visible: false
    '2':
        type: 0
        description: q3 is correct
        name: Q3
        id: q3
        visible: false
    '3':
        id: q4
        type: 0
        name: Q4
        description: q4 is correct
        visible: false
    '4':
        id: q5
        type: 0
        name: Q5
        description: q5 is correct
        visible: false
    '10':
        name: Double free
        type: 1
        id: double_free
        description: Your code produced a double free.
        visible: true
    '11':
        id: banned_funcs
        description: Your code used some banned functions.
        type: 1
        name: Banned functions
        visible: true
    '12':
        id: cppcheck
        name: Cppcheck fails
        description: Your code does not compile with cppcheck.
        type: 1
        visible: true
    '13':
        type: 1
        id: wrong_alloc_size
        description: The allocated memory doesn't have the correct size.
        name: Wrong allocation size
        visible: false
    '14':
        name: Malloc fail handling
        description: Wrong return value when malloc call fails.
        id: malloc_fail_handling
        type: 1
        visible: false
    '5':
        type: 1
        description: Your code exceeded the maximum allowed time.
        name: Timeout
        visible: true
        id: timeout
    '6':
        id: sigsegv
        name: Segmentation Fault
        description: Your code produced a segmentation fault.
        type: 1
        visible: true
    '7':
        description: Your code does not compile.
        visible: true
        id: not_compile
        type: 1
        name: Not compile
    '8':
        visible: true
        name: Memory Exceeded
        id: memory
        type: 1
        description: Your code exceeded the memory.
    '9':
        description: Your code produced a floating point exception.
        id: sigfpe
        type: 1
        visible: true
        name: Floating Point Exception
    '15':
        visible: true
        type: 2
        name: S3
        description: ''
        id: ''
    '16':
        description: Level 2
        visible: true
        name: Level 2
        type: 2
        id: ''
    '17':
        description: Task about malloc
        visible: true
        type: 2
        name: Malloc
        id: ''
    '18':
        name: Pointer
        type: 2
        visible: true
        description: Task about pointers and their use
        id: ''
    '19':
        name: Struct
        visible: true
        description: Task about structures and their use
        type: 2
        id: ''
weight: 1.0
