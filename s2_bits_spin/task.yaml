accessible: true
author: Arthur van Stratum
context: |-
    In this exercise, we will work with operation on bits. When we speak about the position of a bit, index 0 corresponds to lowest order bit, 1 to the second-lowest order bit, ...

    In C source code, you can write a number in binary (base 2) by prefixing it via 0b., e.g. 0b11010 = 26.

    This exercise will introduce some non-standard data types which guarantee that the variable has a fixed number of bits. Indeed, on some machines, a *int* could use 2, 4 or 8 bytes. Hence, if we want to perform bitwise operations, we have to know first on how many bits we are working.

    For this, C introduces a new class of variable types :

    - *int8_t* (signed integer of 8 bits)
    - *uint8_t* (unsigned integer of 8 bits)
    - *uint16_t* (unsigned integer of 16 bits)

    You can mix *uint* or *int* with bit-lengths 8, 16, 32 and 64). These types are defined in <stdint.h>
environment: cpp
evaluate: best
groups: false
input_random: '0'
limits:
    time: '30'
    output: '2'
    memory: '100'
name: '[S2] Bitwise operation: cycling bits '
network_grading: false
order: 11
problems:
    q1:
        type: code
        language: c
        default: ''
        name: ''
        header: |-
            Write the body of a function *cycle_bits*, which cycles all bits from *n* places to the left, according to the formula *x[(i+n)%32] = x[i]*, where *x[i]* is the i-iest bit of *x*.

            Here is a simple example with bytes. Consider byte ``0b01101011``. If ``n`` is set to ``1``, then ``cycle_bits`` would return ``0b11010110``. If ``n`` is set to ``4``, then ``cycle_bits`` would return ``0b10110110``.

            .. code-block:: c

                uint32_t cycle_bits(uint32_t x, uint8_t n) {
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags:
    '0':
        type: 0
        name: Q1
        description: q1 is correct
        id: q1
        visible: false
    '1':
        description: Your code exceeded the maximum allowed time.
        visible: true
        type: 1
        name: Timeout
        id: timeout
    '2':
        id: sigsegv
        visible: true
        name: Segmentation Fault
        description: Your code produced a segmentation fault.
        type: 1
    '3':
        description: Your code does not compile.
        id: not_compile
        type: 1
        visible: true
        name: Not compile
    '4':
        type: 1
        visible: true
        id: memory
        name: Memory Exceeded
        description: Your code exceeded the memory.
    '5':
        type: 1
        name: Floating Point Exception
        description: Your code produced a floating point exception.
        visible: true
        id: sigfpe
    '6':
        visible: true
        id: double_free
        type: 1
        description: Your code produced a double free.
        name: Double free
    '7':
        visible: true
        id: banned_funcs
        type: 1
        name: Banned functions
        description: Your code used some banned functions.
    '8':
        description: Your code does not compile with cppcheck.
        visible: true
        id: cppcheck
        type: 1
        name: Cppcheck fails
    '10':
        visible: true
        description: Task about bitwise operations
        type: 2
        name: Bitwise operation
        id: category_bits
    '9':
        visible: true
        name: S2
        type: 2
        description: ''
        id: ''
    '11':
        visible: true
        name: Level 2
        type: 2
        description: Level 2
        id: level2
weight: 1.0
