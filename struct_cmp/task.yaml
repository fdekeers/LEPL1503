accessible: true
author: Alexandre Gobeaux
context: |-
    Here you will be playing with structures and pointers to structures so that you can understand better how to use one instead of another. You'll have to return the attributes of both and you'll have to compare them.

    .. code-block:: c

        typedef struct product {
            char *name;
            double price;
        } product_t;

    *Hints :*

    - ``char *name`` is a pointer, memory must be allocated by using `malloc(3) <https://sites.uclouvain.be/SystInfo/manpages/man3/malloc.3.html>`_ to copy the string and return it.

    - Other useful commands: `strcpy(3) <https://sites.uclouvain.be/SystInfo/manpages/man3/strcpy.3.html>`_, `strlen(3) <https://sites.uclouvain.be/SystInfo/manpages/man3/strlen.3.html>`_ and `strcmp(3) <https://sites.uclouvain.be/SystInfo/manpages/man3/strcmp.3.html>`_.
environment: cpp
evaluate: last
groups: false
input_random: '0'
limits:
    memory: '100'
    time: '30'
    output: '2'
name: '[S3] Structures and pointers to structures'
network_grading: false
order: 34
problems:
    getPtrPrice:
        type: code
        name: Get Price (pointer to the structure)
        header: |-
            Write the body of the ``getPtrPrice`` function.

            .. code-block:: c

                /*
                 * @ptrProd != NULL
                 * @return: the price of the product ptrProd
                 */
                double getPtrPrice(product_t *ptrProd);
        default: ''
        language: c
    getPrice:
        name: Get Price
        language: c
        type: code
        header: |-
            Write the body of the ``getPrice`` function.

            .. code-block:: c

                /*
                 * @return: the price of the product prod
                 */
                double getPrice(product_t prod);
        default: ''
    getPtrName:
        default: ''
        header: |-
            Write the body of the ``getPtrName`` function.

            .. code-block:: c

                /*
                 * ptrProd != NULL
                 * @name in ptrProd != NULL
                 * @return: a string on the heap that contains the name of the product ptrProd or NULL if an error happens
                 */
                char* getPtrName(product_t *ptrProd);
        name: Get Name (pointer to the structure)
        type: code
        language: c
    getName:
        language: c
        type: code
        header: |-
            Write the body of the ``getName`` function.

            .. code-block:: c

                /*
                 * @name in prod != NULL
                 * @return: a string on the heap that contains the name of the product ptrProd or NULL if an error happens
                 */
                char* getName(product_t prod);
        name: Get Name
        default: ''
    prodEquals:
        language: c
        name: Product Equals
        type: code
        default: ''
        header: |-
            Write the body of the ``prodEquals`` function.

            .. code-block:: c

                /*
                 * @ptrProd != NULL
                 * @name in ptrProd != NULL
                 * @name in prod != NULL
                 * @return: 1 if the two products are the same, i.e., they have the same price and the same name
                 */
                int prodEquals(product_t *ptrProd, product_t prod);
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags:
    '0':
        visible: true
        type: 1
        id: not_compile
        name: Not compile
        description: You code does not compile.
    '1':
        type: 1
        description: ''
        id: sigsegv
        name: Segmentation Fault
        visible: true
    '2':
        id: timeout
        visible: true
        type: 1
        name: Timeout
        description: Your code exceeds the maximum allowed time.
    '3':
        visible: true
        id: banned_funcs
        name: Banned functions
        description: You use some banned functions.
        type: 1
    '4':
        description: You do not manage the case where malloc() fails.
        id: malloc_fail
        visible: true
        type: 1
        name: Malloc fail
    '5':
        description: You did not allocate the right amount of memory.
        id: wrong_alloc_size
        name: Wrong allocation size
        visible: true
        type: 1
weight: 1.0
