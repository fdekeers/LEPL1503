accessible: true
author: Mathieu Xhonneux, Nicolas Rybowski
context: |-
    You have a linked list. Each element of the list is a ``struct node``.

    .. code-block:: c

        struct node {
            struct node *next;
            int hash;
            int id;
            char name[20];
            char buffer[100];
            unsigned int timestamp;
            char acl;
            short flow;
            char *parent;
            void *fifo;
        };
environment: pyjavacpp
evaluate: best
groups: false
input_random: '0'
limits:
    time: '30'
    memory: '100'
    output: '2'
name: '[S4] Filtering a linked list '
network_grading: false
order: 32
problems:
    includes:
        language: ''
        type: code
        default: ''
        name: Includes
        header: 'Please insert here the ``#include`` that are required to use the
            functions that you use to answer this question. These includes are specified
            in the man pages of the functions that you use. '
    filter:
        type: code
        language: c
        header: |-
            We want to filter this list and extract the elements with an even index (the index starts at 0, hence the first, the third, the fifth, ... elements of the linked list have to be taken), without modifying the initial list. In other words, you should create an other list (in parallel of the initial one) that contains the nodes you want to keep and return the head of this new list you created.

            Write the body of the function ``pair_filter``.

            Hint : You should use `memcpy(3) <https://sites.uclouvain.be/SystInfo/manpages/man3/memcpy.3.html>`_ for this question

            .. code-block:: c

                /* pair_filter
                 * Make a copy of the linked list starting at head,
                 * only taking the elements with an even index
                 *
                 * @head : head of a linked list, possibly NULL
                 * @return: pointer to the filtered linked list, return NULL if error or if head == NULL
                 */
                struct node *pair_filter(struct node *head) {
        default: ''
        name: Filtering
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags:
    '0':
        name: Q1
        type: 0
        id: q1
        description: q1 is correct
        visible: false
    '1':
        type: 1
        visible: true
        id: timeout
        description: Your code exceeded the maximum allowed time.
        name: Timeout
    '10':
        name: Bad Args handling
        type: 1
        id: wrong_args_handling
        description: Wrong return value when wrong args.
        visible: false
    '11':
        id: not_expected_list
        description: The linked list does not correspond to the waited one.
        type: 1
        name: Incorrect list
        visible: false
    '12':
        id: sigsegv
        name: Segmentation Fault
        description: Your code produced a segmentation fault.
        type: 1
        visible: true
    '13':
        type: 1
        visible: true
        id: not_compile
        description: Your code does not compile.
        name: Not compile
    '14':
        name: Memory Exceeded
        description: Your code exceeded the memory.
        id: memory
        type: 1
        visible: true
    '2':
        type: 1
        description: Your code produced a floating point exception.
        visible: true
        name: Floating Point Exception
        id: sigfpe
    '3':
        visible: true
        id: double_free
        type: 1
        name: Double free
        description: Your code produced a double free.
    '4':
        id: banned_funcs
        type: 1
        name: Banned functions
        description: Your code used some banned functions.
        visible: true
    '5':
        type: 1
        description: Your code does not compile with cppcheck.
        name: Cppcheck fails
        visible: true
        id: cppcheck
    '6':
        id: not_malloc_once
        name: Not malloc once
        description: The malloc() functions was not called exactly once.
        type: 1
        visible: false
    '7':
        description: The allocated memory doesn't have the correct size.
        id: wrong_alloc_size
        type: 1
        name: Wrong allocation size
        visible: false
    '8':
        name: Error normal case
        id: error_normal_case
        type: 1
        description: Your function returns an error in normal case.
        visible: false
    '9':
        description: The list has not the expected size.
        id: wrong_list_size
        type: 1
        name: Wrong list size
        visible: false
    '15':
        visible: true
        type: 2
        name: S4
        description: ''
        id: ''
    '16':
        description: Task about pointers and their use
        visible: true
        name: Pointer
        type: 2
        id: ''
    '17':
        description: Task about malloc
        visible: true
        type: 2
        name: Malloc
        id: ''
    '18':
        name: Struct
        type: 2
        visible: true
        description: Task about structures and their use
        id: ''
    '19':
        name: Level 4
        visible: true
        description: Level 4
        type: 2
        id: ''
weight: 1.0
