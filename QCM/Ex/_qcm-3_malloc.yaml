accessible: True
author: 
context: |
    Cette semaine, la matière porte sur l'organisation de la mémoire et l'utilisation des fonctions `malloc(3)` et `free(3)`
     - http://sites.uclouvain.be/SystInfo/notes/Theorie/html/C/malloc.html#organisation-de-la-memoire
environment: mcq
evaluate: best
groups: False
input_random: 0
limits:
    output: 2
    memory: 100
    time: 30
name: Questions à choix multiples
network_grading: False
problems:
    malloc:
        choices:
        -   text: |


                - la fonction `malloc(3)` retourne un pointeur de type ``void *``
                - la fonction `free(3)` prend comme argument un pointeur de type ``void *`` qui a été précédemment alloué par la fonction `malloc(3)`
                - si l'appel à `calloc(3)` a retourné un pointeur différent de ``NULL``, alors la zone mémoire demandée a été allouée et est initialisée à zéro
                - une implémentation possible (non efficace) de `realloc(3)` est 


                .. code-block:: c


                   void *realloc(void *ptr, sizet len)
                   {
                     void *r;
                     r = malloc(len);
                     if(r!=NULL)
                     {
                     memcpy(r, ptr, len);
                     free(ptr);
                   }
                   return r;
                   }


            valid: True
            feedback: |
        -   text: |


                - la fonction `malloc(3)` retourne un pointeur de type ``void *``
                - la fonction `free(3)` prend comme argument n'importe quel type de pointeur
                - si l'appel à `malloc(3)` a retourné un pointeur différent de ``NULL``, alors la zone mémoire demandée a été allouée mais n'est pas initialisée à zéro
                - une implémentation possible (non efficace) de `realloc(3)` est


                .. code-block:: c


                   void *realloc(void *ptr, sizet len)
                   {
                     void *r;
                     r = malloc(len);
                     memcpy(r, ptr, len);
                     return r;
                   }

            valid: False
            feedback: |
        -   text: |

                - la fonction `calloc(3)` retourne un pointeur de type ``void *``
                - la fonction `free(3)` prend comme argument un pointeur de type ``void *`` qui a été précédemment alloué par la fonction `malloc(3)`
                - si l'appel à `malloc(3)` a retourné un pointeur différent de ``NULL``, alors la zone mémoire demandée a été allouée et est initialisée
                - une implémentation possible (non efficace) de `realloc(3)` est


                .. code-block:: c


                   void *realloc(void *ptr, sizet len)
                   {
                     return malloc(len);
                   }

            valid: False
            feedback: |
        -   text: |

                - la fonction `calloc(3)` retourne un pointeur de type ``void *``
                - la fonction `free(3)` prend comme argument un pointeur de type ``void *`` qui a été précédemment alloué par la fonction `malloc(3)`
                - si l'appel à `malloc(3)` a retourné un pointeur différent de ``NULL``, alors la zone mémoire demandée a été allouée et est initialisée
                - une implémentation possible (non efficace) de `realloc(3)` est


                .. code-block:: c


                   void *realloc(void *ptr, sizet len)
                   {
                     void *r;
                     r = malloc(len);
                     if(r)
                     {
                     return r;
                   }
                   else
                   {
                     return NULL;
                   }
                   }



            valid: False
            feedback: |
        header: |
            Cette question porte sur les fonctions `malloc(3)` et `free(3)` qui sont importantes pour la manipulation de la mémoire sur le tas.


            Parmi les groupes d'affirmation suivants, un seul est correct. Lequel ?

        limit: 4
        name: `malloc(3)`_ et compagnie
        multiple: False
        type: multiple_choice
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags: {}
weight: 1.0
