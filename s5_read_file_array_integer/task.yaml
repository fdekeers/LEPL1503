accessible: true
author: Olivier Martin, Cyril Pletinckx, Minh-Phuong Tran
context: |-
    *Estimated time: 25 minutes*

    Given a binary file containing some (possibly none) positive integers (``int``) that were stored in a file, write a code that computes the sum of all of these integers. The function returns the sum when there are no errors. In case of errors, it returns.

    - If ``open()`` fails, return ``-1``.
    - If ``close()`` fails, return ``-2``.
    - If ``mmap()`` fails, return ``-3``.
    - If ``munmap()`` fails, return ``-4``.
    - If ``fstat()`` fails, return ``-5``.

    You can only use ``open(2)``, ``mmap(2)``, ``munmap(2)``, ``fstat(2)`` and ``close(2)``.

    **Hint** : ``fstat(2)`` is mandatory to know the size of the file and thus with a simple formula, the number of integers that are stored in it (find it !).
environment: cpp
evaluate: best
groups: false
input_random: '0'
limits:
    time: '30'
    memory: '100'
    output: '2'
name: '[S5] Reading integers in a binary file'
network_grading: false
order: 36
problems:
    q1:
        header: |-
            .. code-block:: c

                /*
                 * @pre filename != NULL, name of the file
                 * @post returns the sum of all integers stored in the binary file.
                 *       return -1 if the file can not be open.
                 *       return -2 if the file can not be closed.
                 *       return -3 if mmap() fails.
                 *       return -4 if munmap() fails.
                 *       return -5 if fstat() fails.
                 */
                int sum_file(char *filename) {
        name: Write your code here
        language: c
        default: ''
        type: code
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags:
    '0':
        name: Q1
        type: 0
        id: q1
        description: q1 is correct
        visible: false
    '1':
        type: 1
        visible: true
        id: timeout
        description: Your code exceeded the maximum allowed time.
        name: Timeout
    '2':
        type: 1
        description: Your code produced a segmentation fault.
        visible: true
        name: Segmentation Fault
        id: sigsegv
    '3':
        visible: true
        id: not_compile
        type: 1
        name: Not compile
        description: Your code does not compile.
    '4':
        id: memory
        type: 1
        name: Memory Exceeded
        description: Your code exceeded the memory.
        visible: true
    '5':
        type: 1
        description: Your code produced a floating point exception.
        name: Floating Point Exception
        visible: true
        id: sigfpe
    '6':
        id: double_free
        name: Double free
        description: Your code produced a double free.
        type: 1
        visible: true
    '7':
        description: Your code used some banned functions.
        visible: true
        id: banned_funcs
        type: 1
        name: Banned functions
    '8':
        visible: true
        name: Cppcheck fails
        id: cppcheck
        type: 1
        description: Your code does not compile with cppcheck.
    '9':
        description: You do not manage failures properly when a system call fails.
        id: failure_handling
        type: 1
        visible: true
        name: Failure handling
    '10':
        name: S5
        type: 2
        description: ''
        visible: true
        id: ''
    '11':
        description: Task about mmap, munmap and msync
        type: 2
        name: Mmap
        visible: true
        id: ''
    '12':
        name: Files
        description: Task about files
        type: 2
        visible: true
        id: ''
    '13':
        type: 2
        visible: true
        description: Level 3
        name: Level 3
        id: ''
weight: 1.0
