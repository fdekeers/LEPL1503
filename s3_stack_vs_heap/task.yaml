accessible: true
author: Nicolas Rybowski, Mathieu Xhonneux
context: |-
    In a C program, variables are stored in different regions in memory, depending on where the variables have been initialized. Each memory region has different properties about how the variables can be accessed, modified, ... This exercise will show you how global variables and variables on the stack are managed.

    .. code-block:: c

        int result;

        void sum1(int a1, int b1) {
            a1 = a1 + b1;
        }

        void main(int argc, char **argv) {
            int a1 = 5, b1 = 6;

            sum1(a1, b1);
            printf("sum1: %d\n", a1);

            int a2 = 3, b2 = 7;
            sum2(a2, b2);
            printf("sum2: %d\n", result);

            int a3 = 1, b3 = 8;
            int r;
            sum3(&a3, &b3, &r);
            printf("sum3: %d\n", r);
        }
environment: cpp
evaluate: best
groups: false
input_random: '0'
limits:
    time: '30'
    memory: '100'
    output: '2'
name: '[S3] Global and local variables'
network_grading: false
order: 25
problems:
    return1:
        type: match
        header: |-
            The variables which are declared inside functions are stored on the program's stack. These variables are only accessible by the function in which they were declared.

            Moreover, passing arguments to functions, and returning values from a function, also use the stack, and use the mechanism of passing by value. Once a variable is passed by value, a copy of its value is placed on the stack.

            Consider the ``main`` function here above. What number would the first call to ``printf`` print ?
        name: On the stack
        answer: '5'
    version1:
        type: code
        name: Global variables
        language: c
        default: ''
        header: |
            Write the body of the function ``sum2`` which stores in the global variable ``result`` the sum of its parameters. Why does it work with a global variable ?

            .. code-block:: c

                void sum2(int a, int b) {
    version2:
        header: |
            You are now asked to return the result of the sum, neither by using the ``return`` keyword, nor by using a global variables.

            .. code-block:: c

                /*
                 * @post stores the sum of the values pointed by a and b in the memory pointed by r
                 */
                void sum3 (int *a, int *b, int *r) {
        language: c
        name: Passing by reference
        default: ''
        type: code
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags:
    '0':
        name: Q2
        type: 0
        id: q2
        description: q2 is correct
        visible: false
    '1':
        type: 0
        id: q3
        description: q3 is correct
        name: Q3
        visible: false
    '2':
        type: 1
        description: Your code exceeded the maximum allowed time.
        visible: true
        name: Timeout
        id: timeout
    '3':
        visible: true
        id: sigsegv
        type: 1
        name: Segmentation Fault
        description: Your code produced a segmentation fault.
    '4':
        id: not_compile
        type: 1
        name: Not compile
        description: Your code does not compile.
        visible: true
    '5':
        type: 1
        description: Your code exceeded the memory.
        name: Memory Exceeded
        visible: true
        id: memory
    '6':
        id: sigfpe
        name: Floating Point Exception
        description: Your code produced a floating point exception.
        type: 1
        visible: true
    '7':
        description: Your code produced a double free.
        visible: true
        id: double_free
        type: 1
        name: Double free
    '8':
        visible: true
        name: Banned functions
        id: banned_funcs
        type: 1
        description: Your code used some banned functions.
    '9':
        description: Your code does not compile with cppcheck.
        id: cppcheck
        type: 1
        visible: true
        name: Cppcheck fails
    '10':
        name: S3
        type: 2
        description: ''
        visible: true
        id: ''
    '11':
        description: Task about pointers and their use
        type: 2
        name: Pointer
        visible: true
        id: ''
    '12':
        name: Level 1
        description: Level 1
        type: 2
        visible: true
        id: ''
weight: 1.0
