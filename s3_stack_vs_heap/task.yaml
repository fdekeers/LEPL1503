accessible: true
author: Nicolas Rybowski, Mathieu Xhonneux
context: |-
    In a C program, variables are stored in different regions in memory, depending on where the variables have been initialized. Each memory region has different properties about how the variables can be accessed, modified, ... This exercise will show you how global variables and variables on the stack are managed.

    .. code-block:: c

        int result;

        void sum1(int a1, int b1) {
            a1 = a1 + b1;
        }

        void main(int argc, char **argv) {
            int a1 = 5, b1 = 6;

            sum1(a1, b1);
            printf("sum1: %d\n", a1);

            int a2 = 3, b2 = 7;
            sum2(a2, b2);
            printf("sum2: %d\n", result);

            int a3 = 1, b3 = 8;
            int r;
            sum3(&a3, &b3, &r);
            printf("sum3: %d\n", r);
        }
environment: cpp
evaluate: best
groups: false
input_random: '0'
limits:
    memory: '100'
    output: '2'
    time: '30'
name: '[S3] Global and local variables'
network_grading: false
order: 25
problems:
    return1:
        answer: '5'
        header: |-
            The variables which are declared inside functions are stored on the program's stack. These variables are only accessible by the function in which they were declared.

            Moreover, passing arguments to functions, and returning values from a function, also use the stack, and use the mechanism of passing by value. Once a variable is passed by value, a copy of its value is placed on the stack.

            Consider the ``main`` function here above. What number would the first call to ``printf`` print ?
        type: match
        name: On the stack
    version1:
        default: ''
        name: Global variables
        header: |
            Write the body of the function ``sum2`` which stores in the global variable ``result`` the sum of its parameters. Why does it work with a global variable ?

            .. code-block:: c

                void sum2(int a, int b) {
        language: c
        type: code
    version2:
        language: c
        default: ''
        type: code
        header: |
            You are now asked to return the result of the sum, neither by using the ``return`` keyword, nor by using a global variables.

            .. code-block:: c

                /*
                 * @post stores the sum of the values pointed by a and b in the memory pointed by r
                 */
                void sum3 (int *a, int *b, int *r) {
        name: Passing by reference
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags:
    '0':
        type: 0
        name: Q2
        description: q2 is correct
        id: q2
        visible: false
    '1':
        type: 0
        description: q3 is correct
        id: q3
        name: Q3
        visible: false
    '2':
        visible: true
        type: 1
        id: timeout
        name: Timeout
        description: Your code exceeded the maximum allowed time.
    '3':
        description: Your code produced a segmentation fault.
        visible: true
        type: 1
        id: sigsegv
        name: Segmentation Fault
    '4':
        type: 1
        visible: true
        id: not_compile
        description: Your code does not compile.
        name: Not compile
    '5':
        name: Memory Exceeded
        id: memory
        type: 1
        description: Your code exceeded the memory.
        visible: true
    '6':
        name: Floating Point Exception
        id: sigfpe
        description: Your code produced a floating point exception.
        visible: true
        type: 1
    '7':
        description: Your code produced a double free.
        id: double_free
        type: 1
        name: Double free
        visible: true
    '8':
        type: 1
        visible: true
        id: banned_funcs
        description: Your code used some banned functions.
        name: Banned functions
    '9':
        visible: true
        id: cppcheck
        description: Your code does not compile with cppcheck.
        type: 1
        name: Cppcheck fails
    '10':
        description: ''
        name: S3
        type: 2
        visible: true
        id: ''
    '11':
        visible: true
        name: Pointer
        description: Task about pointers and their use
        type: 2
        id: ''
    '12':
        type: 2
        description: Level 1
        visible: true
        name: Level 1
        id: ''
weight: 1.0
