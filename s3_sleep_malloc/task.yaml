accessible: true
author: Mathieu Xhonneux & Maxime Mawait
context: |-
    The `malloc(3) <https://sites.uclouvain.be/SystInfo/manpages/man3/malloc.3.html>`_ function may fail, for instance if the OS has no free memory remaining. In this case, it may be possible that some other processes free some memory after some time and then we could use it again.

    In our program, instead of reporting an error immediately if no free memory is available, we will wait some time to see if the OS has freed memory for us.
environment: cpp
evaluate: best
groups: false
input_random: '0'
limits:
    time: '30'
    memory: '100'
    output: '2'
name: '[S3] Sleepy malloc'
network_grading: false
order: 27
problems:
    sleep_malloc:
        name: Sleepy malloc
        language: c
        default: ''
        header: |-
            Write the body of the function ``sleepy_malloc``. Use the function `sleep(3) <https://sites.uclouvain.be/SystInfo/manpages/man3/sleep.3.html>`_.


            .. code-block:: c

                /* Wrapper to the malloc system call.
                 * If malloc fails, sleep for 5 seconds, and then try again.
                 * If malloc failed 10 times in a row, return NULL.
                 */
                void *sleepy_malloc(size_t s) {
        type: code
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags:
    '0':
        name: Q1
        type: 0
        id: q1
        description: q1 is correct
        visible: false
    '1':
        type: 1
        visible: true
        id: timeout
        description: Your code exceeds the maximum allowed time.
        name: Timeout
    '2':
        type: 1
        description: ''
        visible: true
        name: Segmentation Fault
        id: sigsegv
    '3':
        visible: true
        id: not_compile
        type: 1
        name: Not compile
        description: You code does not compile.
    '4':
        id: memory
        type: 1
        name: Memory Exceeded
        description: ''
        visible: true
    '5':
        type: 1
        description: ''
        name: Floating Point Exception
        visible: true
        id: sigfpe
    '6':
        id: double_free
        name: Double free
        description: Your code produced a double free.
        type: 1
        visible: true
    '7':
        description: You use some banned functions.
        visible: true
        id: banned_funcs
        type: 1
        name: Banned functions
    '8':
        visible: true
        name: Cppcheck fails
        id: cppcheck
        type: 1
        description: Your code does not compile with cppcheck
    '9':
        description: The malloc() functions was not called exactly once when malloc
            succeeds the first time.
        id: not_malloc_once
        type: 1
        name: Not malloc once
        visible: false
    '10':
        name: S3
        type: 2
        description: ''
        visible: true
        id: ''
    '11':
        description: Level 2
        type: 2
        name: Level 2
        visible: true
        id: ''
    '12':
        name: Malloc
        description: Task about malloc
        type: 2
        visible: true
        id: ''
weight: 1.0
